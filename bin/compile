#!/bin/sh
# bin/compile BUILD_DIR CACHE_DIR ENV_DIR

set -u # stop on unset variables
set -e # stop on error

indent() {
  sed -u 's/^/       /'
}

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

CMAKE_VERSION="3.8.1"
BASE_URL="https://cmake.org/files/v3.8"
TARBALL="cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz"
SIGNATURE="cmake-$CMAKE_VERSION-SHA-256.txt.asc"
CHECKSUMS="cmake-$CMAKE_VERSION-SHA-256.txt"
TARBALL_PATH="/tmp/$TARBALL"
SIGNATURE_PATH="/tmp/$SIGNATURE"
CHECKSUMS_PATH="/tmp/$CHECKSUMS"

echo "-----> Installing CMake version: $CMAKE_VERSION"

echo "Downloading binary distribution" | indent
curl --silent --retry 5 $BASE_URL/$TARBALL   --output $TARBALL_PATH
curl --silent --retry 5 $BASE_URL/$SIGNATURE --output $SIGNATURE_PATH
curl --silent --retry 5 $BASE_URL/$CHECKSUMS --output $CHECKSUMS_PATH

echo "Verifying download" | indent

set +e
for i in `seq 1 360`; do
  gpg --quiet \
      --keyserver keys.gnupg.net \
      --keyserver-options timeout=5 \
      --recv-keys CBA23971357C2E6590D9EFD3EC8FEF3A7BFB4EDA
  if [ $? = 0 ]; then
    break;
  else
    sleep 5
  fi
done
set -e
gpg --quiet --verify $SIGNATURE_PATH $CHECKSUMS_PATH
grep $(shasum -a 256 $TARBALL_PATH) $CHECKSUMS_PATH

echo "Extracting download" | indent
tar xzf $TARBALL_PATH -C /tmp

echo "Moving binary" | indent
mkdir -p "$BUILD_DIR/.heroku/cmake/"
mv ${TARBALL_PATH%.*.*}/bin "$BUILD_DIR/.heroku/cmake/"
mv ${TARBALL_PATH%.*.*}/share "$BUILD_DIR/.heroku/cmake/"

echo "Exporting PATH" | indent
echo "export PATH=\"\$PATH:$BUILD_DIR/.heroku/cmake/bin\"" > $BP_DIR/export

echo "Testing binary" | indent
$BUILD_DIR/.heroku/cmake/bin/cmake --version

mkdir -p $BUILD_DIR/.tdlib

git clone https://github.com/tdlib/td.git $BUILD_DIR/.tdlib
cd $BUILD_DIR/.tdlib
rm -rf build
mkdir build
cd build
CXXFLAGS="-stdlib=libc++" CC=$BUILD_DIR/.apt/usr/bin/clang CXX=$BUILD_DIR/.apt/usr/bin/clang++ $BUILD_DIR/.heroku/cmake/bin/cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=../tdlib ..
$BUILD_DIR/.heroku/cmake/bin/cmake --build . --target prepare_cross_compiling
cd ..
php SplitSource.php
cd build
$BUILD_DIR/.heroku/cmake/bin/cmake --build . --target install
cd ..
php SplitSource.php --undo
cd ..
ls -l td/tdlib